To implement Generics, the Java compiler applies type erasure to replace all type 
parameters in generic types with their bounds or "Object" if the type parameters 
are unbounded. The produced bytecode, therefore, contains only ordinary classes, 
interfaces, and methods. Type erasure ensures that no new classes are created for
parameterized types consequently, generics incur no run-time overhead.

Arrays in Java don’t support type erasure, the parametrized type <T> doesn't exist
at run-time, the compiler cannot assign a run-time type to the array created.

Each object in Java has a "class" which can be retrieved at runtime, using the 
getClass() method. When we use getClass() on an array object, you get the "array 
class" representing that type of array. Arrays of different component types 
correspond to different array classes. So getClass() called on an int array will
return a different thing than .getClass() called on a String array. From any array
object, we can query its (array) class at runtime, and then from that, get the 
component type of the array.

At runtime, the compiled class needs to handle all of its uses with the same 
bytecode. So, new T[size] won't know what type needs to be instantiated.